<?php
/**
 * @file
 * Custom functionality for Bazar Theme
 */

/**
 * implements hook_help()
 */
function bazar_help($path, $arg){
    switch($path){
        case 'admin/help#bazar':{
            $ret_val = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>'. t('The Bazar module makes it easy to incorporate
            bazar theme').'</p>';
            return $ret_val;
            break;
        }

    }
}

/**
 * implements hook_permission()
 */
function bazar_permission(){
    return array(
        'administer bazar theme' => array(
            'title' => t('Administer Bazar Theme'),
            'description' => t('Perform administrative tasks on Bazar Theme functionality'),
        ),
    );
}

/**
 * implements hook_menu()
 */
function bazar_menu(){
    $items = array();

    //Admin configurations group.
    $items['admin/config/bazar'] = array(
        'title' => 'Bazar Theme',
        'description' => 'Adminster Bazar Theme',
        'access arguments' => array('administer bazar theme'),
    );

    //Admin configuration - Settings
    $items['admin/config/bazar/manage'] = array(
        'title' => 'Bazar Theme Settings',
        'description' => 'Manage Bazar setting and configuraitons',
        'access arguments' => array('administer bazar theme'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bazar_admin_settings_form'),

    );

    return $items;
}

/**
 * implements hook_form().
 */
function bazar_admin_settings_form($node, &$form_state){
    $form = array();

    $form['overview'] = array(
        '#markup' => t('this interface allows administrator to manage general Bazar Settigns'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
    );

    $form['windfarms_gmap'] = array(
        '#title' => t('Enable Google Maps'),
        '#description' => t('whne enbaled, Google Maps will be rendered if lat and logn known'),
        '#type' => 'checkbox',
        '#default_value' => variable_get('windfarms_gmap'),
    );

    $form['default_center'] = array(
        '#title' => t('Map Center'),
        '#description' => t('Location of the center of the map of wind farms'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $form['default_center']['windfarms_default_center_lat'] = array(
        '#title' => t('Latitude'),
        '#description' => t('Signed degrees format (DDD.dddd)'),
        '#type' => 'textfield',
        '#default_value' => variable_get('windfarms_default_center_lat'),
        '#required' => TRUE,
    );
    $form['default_center']['windfarms_default_center_long'] = array(
        '#title' => t('Longitude'),
        '#description' => t('Signed degrees format (DDD.dddd)'),
        '#type' => 'textfield',
        '#default_value' => variable_get('windfarms_default_center_long'),
        '#required' => TRUE,
    );

    $options = range(0,20,1);
    $options[0] = t('0 - Furthest');
    $options[20] = t('20 -  Closest');

    $form['windfarms_default_gmap_zoom'] = array(
        '#title' => t('Google Map zoom'),
        '#description' => t('Default level of zoom, between 0 and 20.'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => variable_get('windfarms_default_gmap_zoom'),
        '#required' => TRUE,
    );

//    $form['submit'] = array(
//        '#type' => 'submit',
//        '#value' => 'save',
//    );

    return system_settings_form($form);
}

/**
 * validates Bazar admin settings
 */

function bazar_admin_settings_form_validate($form, &$form_state){
    //dpm($form_state);
    //dpm($form_state['values']);



    //shorthand for long array name
    $lat = $form_state['values']['windfarms_default_center_lat'];
    $long = $form_state['values']['windfarms_default_center_long'];

    //Validate latitude and longtide format
    if(!_windfarms_validate_signed_degrees( $lat)){
        form_set_error('windfarms_default_center_lat', t('Invalid latitude must be a signurd degree '));
    }
    if(!_windfarms_validate_signed_degrees($long)){
        form_set_error('windfarms_default_center_long', t('Invalid latitude must be a signurd degree '));
    }

    //validate latitude and longtitude values
    if(!_windfarms_validate_geo_coord_range($lat)){
        form_set_error('windfarms_default_center_lat', t('lat between -180 and 180'));
    }
    if(!_windfarms_validate_geo_coord_range($long)){
        form_set_error('windfarms_default_center_long', t('long between -180 and 180'));
    }
}

/**
 * process a validatted bazar admin settings submission
 */

//function bazar_admin_settings_form_submit($form, &$form_state){
//    //Rebuild the form
//    $form_state['rebuild'] = TRUE;
//
//    //Save Wind Farm setting variables.
//    variable_set('windfarms_gmap', $form_state['values']['windfarms_gmap']);
//    variable_set('windfarms_default_center_long', $form_state['values']['windfarms_default_center_long']);
//    variable_set('windfarms_default_center_lat', $form_state['values']['windfarms_default_center_lat']);
//    variable_set('windfarms_default_gmap_zoom', $form_state['values']['windfarms_default_gmap_zoom']);
//
//    //Notify user
//    drupal_set_message(t('Wind Farm setting save'));
//}


/**
 * implements hook_form_alter()
 */
function bazar_form_alter(&$form, &$form_state, $form_id){
    //like to add validation but i don't know the form id
    //dpm($form_id);
    //i would like to see the structure of the form
    //dpm($form);
    //return to browser, clear craches and go to form

    //Afterwards, we can turn on debuging only for our form of interest. From the form id we can figure out the validation callback function to be windfarm_node_form_validate
    switch($form_id){
        case 'windfarm_node_form':{
            //dpm($form);
            //look for #validate that takes list of function names that are used to validate the form. I can ad custom funciton to this array
            $form['#validate'][] = 'windfarms_windfarm_node_form_validate';
            // next, add validation function
            break;
        }
    }
}

/**
 * validate Wind Farm content type
 */
function windfarms_windfarm_node_form_validate($form, &$form_state){
    //to see what validated - the structure
    //dpm($form_state);
    //purposely set error
    //form_set_error('','testing');

    //Validate Unit Count
    $value = $form_state['values']['windfarm_unit_count'][LANGUAGE_NONE][0]['value'];

    if($value !== ''  && (!is_numeric($value) || intval($value) != $value || $value <= 0)){
        form_set_error('windfarm_unit_count', t('the number of units on wind f must be number'));
    }

    //validate latitude
    $lat = $form_state['values']['windfarm_latitude'][LANGUAGE_NONE][0]['value'];
    if(!_windfarms_validate_signed_degrees($lat) || _windfarms_validate_geo_coord_range($lat)){
        form_set_error('windfarm_latitude', t('lat must be within range of ...'));
    }

    //validate longitude
    $long = $form_state['values']['windfarm_longitude'][LANGUAGE_NONE][0]['value'];
    if(!_windfarms_validate_signed_degrees($long) || _windfarms_validate_geo_coord_range($long)){
        form_set_error('windfarm_longitude', t('Long must be within range of ...'));
    }
}

//to avoid duplicate create function. underscored function indicate local to file/module
/**
 * Determine if valu is signed degrees format
 * @param string $value
 *      value to be tested
 * @return bool
 *      TRUE if correct formated
 */
function _windfarms_validate_signed_degrees($value){
    //regular expression for validating signed degrees.
    $signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
    return preg_match($signed_degree_regex, $value) ? TRUE : FALSE;
}

/**
 * Determine if geographic coordinat is withing the valid range
 * @param string $value
 *      The value to be tested
 * @return bool
 *      TRUE if between -180 to 180
 */
function _windfarms_validate_geo_coord_range($value){
    return ((-180 >= $value) && ($value <= 180));
}

/**
 * implments hook_node_view()
 * function accessed on every node view
 */

function bazar_node_view($node, $view_node, $langcode){
    if($node->type = 'windfarm' && $view_node == 'full'){

        /*when rendering a node, drupal build structured array keyed with element name.
        This markup is the same structure as Form API and is placed in 'content' propety
        of  node. I will be create new element in content property of node
        */
        $node->content['windfarm_gmap'] = array(
            /*Use hash tag markup to indicate that the content of this element is rendered html.
             * Call theme function to create the content. The theme function generates the theme output
             * by examining what requested and determining the right themeing option and template
             * The themeing funciton takes two params - the name of hook, optional params passed themeing target
             */
             '#markup' => theme('windfarm_gmap', array(
                'node' => $node,
            )),
            '#weight' => 100,

        );
    }
}

/**
 * Next tell Drupal about the custom theme and the arguments it takes. I do that with hook_theme
 * that registesr the custom theme with drupal
 */

/**
 * Implements hook_theme()
 */

function bazar_theme($existing, $type, $theme, $path){
    //don't need any but must define

    //hook theme returns array keyed by the name of theme function and some options, so variables provided to theme
    return array(
        'windfarm_gmap' => array(
            'variables' => array('node' => NULL),
        ),
    );
}

/**
 *Create Theme function itself. Theme function don't implement anyhting hooks and otherwise,
 * just return string of output
 */

/**
 * Wind Farm Google Map Theme function
 */
function theme_windfarm_gmap($variables){
    //dpm($variables);

    //check to see if google map is enabled
    if(!variable_get('windfarm_gmap')){
        return;
    }

    //check if
    $lat = $variables['node']->windfarm_latitude[LANGUAGE_NONE][0]['value'];
    $long = $variables['node']->windfarm_longitude[LANGUAGE_NONE][0]['value'];

    if(($lat == '') || ($long == '')){
        return;
    }

    //build map with  gmap3 tools module
    //1.Load the inlcude file
    module_load_include('inc', 'gmap3_tools');

    //2.create the map with configuration array
    //need fascility name and description used ot populate the map
    $facility_name = check_plain($variables['node']->title);
    $description = check_plain($variables['node']->body[LANGUAGE_NONE][0]['value']);
    gmap3_tools_add_map(array(
            'mapId' => 'gmap-canvas-' . $variables['node']->nid,
            'mapOptions' => array(
                'zoom' => (int) variable_get('windfarms_default_gmap_zoom'),
                'mapTypeId' => GMAP3_TOOLS_MAP_TYPE_ID_SATELLITE,
            ),
            'markers' => array(
                gmap3_tools_create_marker($lat,$long,$facility_name,$description),
            ),
            'gmap3ToolsOptions' => array(
                'defaultMarkerPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER,
            ),
        )
    );

    //3.add element that will be populated with map by id
    $output = '<div id="gmap-canvas-"' . $variables['node']->nid . '" style="width:500px;height:400px;"></div>';
    return $output;
}


/*****CREATING BLOCK********/


/**
 * Implements hook_block_info()
 * for admin ui to show up the block
 */
function bazar_block_info(){
    $blocks = array();

    $blocks['gmap'] = array(
        'info' => t('Wind Farm Map'),//admin ui block name
    );

    return $blocks;
}

/**
 * Implements hook_block_view
 * the rendered block content and title
 */
function bazar_block_view($delta = ''){
    $block = array();

    switch($delta){
        case 'gmap':{
            $block['subject'] = t('Wind Farm Map');
            $block['content'] = windfarms_block_contents($delta);
            break;
        }
    }

    return $block;
}

/**
 * Wind Farm Block contents
 *
 *@param string $delta
 *   the block ID
 *
 * @return string
 *   HTML output.
 */

function windfarms_block_contents($delta){
    $output = '';
    switch($delta){
        case 'gmap':{
            //take adventage of module 'location
            module_load_include('inc', 'location', 'earth');

            //100 miles
            $distance_meters = 100 * 1609.34;

           //Determine the range of lat and long from the default center
           $lat = variable_get('windfarms_default_center_lat');
           $long = variable_get('windfarms_default_center_long');

           $range_lat = earth_latitude_range($long, $lat, $distance_meters);
           $range_long = earth_latitude_range($long, $lat, $distance_meters);

           //Build query
           $query = new EntityFieldQuery();

           //Only show windfarms
           $query->entityCondition('bundle','windfarm');

           //only show latitude between the range
           $query->fieldCondition('windfarm_latitude', 'value', $range_lat, 'BETWEEN');

            //only show longitude between the range
            $query->fieldCondition('windfarm_longitude', 'value', $range_long, 'BETWEEN');

            //Excecute query
            $result = $query->execute();
            // will return array of associate arrays keyed by entity type outside and relative entity inside

            //No results
           if(!isset($result['node'])){
               return '';
           }

           $nodes = node_load_multiple(array_keys($result['node']));
           module_load_include('inc','gmap3_tools');

           $markers = array();

           foreach($nodes as $node){
               $lat = $node->windfarm_latitude[LANGUAGE_NONE][0]['value'];
               $long = $node->windfarm_longitude[LANGUAGE_NONE][0]['value'];

               //Cannot render map without both
               if(($lat == '') && ($long == '')){
                   continue;
               }

               $facility_name = check_plain($node->title);
               $description = check_plain($node->body[LANGUAGE_NONE][0]['value']);

               //Add a link to the node
               $description .= ' ' . l(t('More info'), 'node/' . $node->nid);

               //Add to markers
               $markers[] = gmap3_tools_create_marker($lat,$long, $facility_name,$description);

           }

           //create all markers with all the markers
            gmap3_tools_add_map(array(
                'mapId' => 'gmap-canvas-block',
                'mapOptions' => array(
                    'mapTypeId' => GMAP3_TOOLS_MAP_TYPE_ID_SATELLITE,
                ),
                'markers' => $markers,
                'gmap3ToolsOptions' => array(
                    'defaultMarkerPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER_ZOOM,
                ),
            ));
            //HTML container for the map
            $output = '<div id="gmap-canvas-block" style="width:500px;height:400px;"></div>';
           break;
        }
    }

    return $output;
}

/**
 * Demonstrate working with theme layer
 */

/**
 * Implements hook_theme_registry_alter()
 */
//function bazar_theme_registry_alter(&$theme_registry){
//    //var_dump($theme_registry);
//    return;
//}